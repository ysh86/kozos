OUTPUT_FORMAT("elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(_start)

MEMORY
{
        romall(rx)      : o = 0x00000000, l = 0x00080000 /* 512KB */
        vectors(r)      : o = 0x00000000, l = 0x00000400 /* top of ROM */
        rom(rx)         : o = 0x00000400, l = 0x0007fc00

        ramall(rwx)     : o = 0x20000000, l = 0x00020000 /* 128KB */
        softvec(rw)     : o = 0x20000000, l = 0x00000040 /* top of RAM */
        buffer(rwx)     : o = 0x20010000, l = 0x0000c000 /* 48KB */
        data(rwx)       : o = 0x2001c000, l = 0x00004000 /* 16KB */
        stack(rw)       : o = 0x20020000, l = 0x00000000 /* end of RAM */
}

SECTIONS
{
        .vectors : {
            vector.o(.data)
        } > vectors
        . = ALIGN (4);

        .text : {
            _text_start = . ;
            *(.text)
            _etext = . ;
        } > rom
        . = ALIGN (4);

        .rodata : {
            _rodata_start = . ;
            *(.strings)
            *(.rodata)
            *(.rodata.*)
            _erodata = . ;
        } > rom
        . = ALIGN (4);

        .softvec : {
            _softvec = . ;
        } > softvec

        .buffer : {
            _buffer_start = . ;
        } > buffer

        .data : {
            _data_start = . ;
            *(.data)
            _edata = . ;
        } > data AT> rom
        . = ALIGN (4);

        .bss : {
            _bss_start = . ;
            *(.bss)
            *(COMMON)
            _ebss = . ;
        } > data AT> rom
        . = ALIGN (4);
        _end = . ;

        .stack : {
            _stack = . ;
        } > stack
}
